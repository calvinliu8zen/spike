// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	Forward(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

var proxyForwardStreamDesc = &grpc.StreamDesc{
	StreamName: "Forward",
}

func (c *proxyClient) Forward(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Proxy/Forward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyService is the service API for Proxy service.
// Fields should be assigned to their respective handler implementations only before
// RegisterProxyService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ProxyService struct {
	Forward func(context.Context, *ProxyRequest) (*ProxyResponse, error)
}

func (s *ProxyService) forward(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protobuf.Proxy/Forward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Forward(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterProxyService registers a service implementation with a gRPC server.
func RegisterProxyService(s grpc.ServiceRegistrar, srv *ProxyService) {
	srvCopy := *srv
	if srvCopy.Forward == nil {
		srvCopy.Forward = func(context.Context, *ProxyRequest) (*ProxyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "protobuf.Proxy",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Forward",
				Handler:    srvCopy.forward,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "internal/protobuf/proxy.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewProxyService creates a new ProxyService containing the
// implemented methods of the Proxy service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewProxyService(s interface{}) *ProxyService {
	ns := &ProxyService{}
	if h, ok := s.(interface {
		Forward(context.Context, *ProxyRequest) (*ProxyResponse, error)
	}); ok {
		ns.Forward = h.Forward
	}
	return ns
}

// UnstableProxyService is the service API for Proxy service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableProxyService interface {
	Forward(context.Context, *ProxyRequest) (*ProxyResponse, error)
}
